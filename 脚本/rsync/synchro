#!/bin/bash


cecho(){
    KEYS=$1
    shift
    ECHOCMD="echo"
    [[ ${KEYS:0:1} == '0' ]] && ECHOCMD=$ECHOCMD" -n "
    read EFFECT FONTCOLOR BACKCOLOR <<< "${KEYS:1:1} ${KEYS:2:1} ${KEYS:3:1}"
    ${ECHOCMD} -e "\033[${EFFECT};4${BACKCOLOR};3${FONTCOLOR}m$@\033[0m"
}


usage(){
    cat <<< """Usage:
    $(basename $0) -f {hosts_file} [dir|files]
    示例: 
        $(basename $0) -f hosts_list test_file
        $(basename $0) root@192.168.100.101 test_file
    
    注意: 
        1. 未指定目标节点文件位置时使用本地文件绝对路径
        2. 确保目标节点目录存在
        3. 不指定目标用户时使用当前本地执行用户

    -q, --quiet         不显示消息
    -h, --help          帮助信息
    -d, --delete        删除远程节点不存在于本地的多余文件
    -f, --hosts_file    连接多个节点时的节点列表文件
    -i, --identity_file 连接时使用的ssh密钥文件
    -p, --password      连接时使用的密码(需要sshpass)
    -t, --timeout       超时时间
    """
    cecho 1019 $@
    exit 1
}

check_env(){
    for m in $@
    do
        [[ $(which ${m} >& /dev/null) ]] || usage "$0 error: module ${m} not found"
    done    
}

add_repos(){
tee /etc/yum.repos.d/CentOS-infra.repo <<-'EOF'
[infra]
name=CentOS-$releasever - infra - mirrors.tuna.tsinghua.edu.cn
failovermethod=priority
baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/infra/x86_64/infra-common
        https://mirrors.aliyun.com/centos/7.9.2009/infra/x86_64/infra-common
        https://download.fedoraproject.org/pub/epel/7/x86_64
gpgcheck=0
enabled=0
EOF
}




#!/bin/bash
src=/data/                           # 需要同步的源路径
des=data                             # 目标服务器上 rsync --daemon 发布的名称，rsync --daemon这里就不做介绍了，网上搜一下，比较简单。
rsync_passwd_file=/etc/rsyncd.passwd            # rsync验证的密码文件
ip1=192.168.0.18                    # 目标服务器1
ip2=192.168.0.19                    # 目标服务器2
user=root                            # rsync --daemon定义的验证用户名
cd ${src}                            

local TARGET=$@
local LINENO=0
inotifywait -mrqe attrib,close_write,move,create,delete --timefmt '%Y-%m-%d_%T' --format '%T %w%f %e' "${TARGET[@]}" |\
while read TIMESTAMP FILE EVENT
do
    let LINENO++
    echo date: $T file: $F event: $E
done


        INO_EVENT=$(echo $file | awk '{print $1}')      # 把inotify输出切割 把事件类型部分赋值给INO_EVENT
        INO_FILE=$(echo $file | awk '{print $2}')       # 把inotify输出切割 把文件路径部分赋值给INO_FILE
        echo "-------------------------------$(date)------------------------------------"
        echo $file
        if [[ $INO_EVENT =~ 'CREATE' ]] || [[ $INO_EVENT =~ 'MODIFY' ]] || [[ $INO_EVENT =~ 'CLOSE_WRITE' ]] || [[ $INO_EVENT =~ 'MOVED_TO' ]]         # 判断事件类型
        then
                echo 'CREATE or MODIFY or CLOSE_WRITE or MOVED_TO'
                rsync -avzcR --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip1}::${des} &&
                rsync -avzcR --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip2}::${des}
        fi
        if [[ $INO_EVENT =~ 'DELETE' ]] || [[ $INO_EVENT =~ 'MOVED_FROM' ]]
        then
                echo 'DELETE or MOVED_FROM'
                rsync -avzR --delete --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip1}::${des} &&
                rsync -avzR --delete --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip2}::${des}
        fi
        if [[ $INO_EVENT =~ 'ATTRIB' ]]
        then
                echo 'ATTRIB'
                if [ ! -d "$INO_FILE" ]
                then
                        rsync -avzcR --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip1}::${des} &&         
                        rsync -avzcR --password-file=${rsync_passwd_file} $(dirname ${INO_FILE}) ${user}@${ip2}::${des}
                fi
        fi
done